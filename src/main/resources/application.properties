#To create a Docker container, the below configuration is run on Windows PowerShell terminal when run as an admin
#Then open Docker to create the container for the war file and avoid using the real DB
#The some-mongo is the container name ans can be customized
#Then the USERNAME and PASSWORD and -p(port) should match the ones in the project configuration files setup
docker run -it -p 27017:27017 --name some-mongo -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo:3.4

#application.properties SETUP for production environment
### to indicate for running they need to be uncommented

# Profiles values: (prod/dev/debug) , (db,xml)
###spring.profiles.active =prod, xml
#Initial pool size
###puk.jdbc.connectionPooling.initialSize = 10
#Flag to log stack traces for application code which abandoned a Statement or Connection.
###puk.jdbc.connectionPooling.logAbandoned = true
#Maximum number of allowed active connections at the same time
###puk.jdbc.connectionPooling.maxActive = 20
#Maximum time a resource can wait while attempting borrowing from the pool, in milliseconds
###puk.jdbc.connectionPooling.maxWait = 5000
#Defines whether to remove abandoned connections
###puk.jdbc.connectionPooling.removeAbandoned = true
#Timeout in seconds before an abandoned connection can be removed.
###puk.jdbc.connectionPooling.removeAbandonedTimeout = 5000

###spring.jersey.type=filter
###selfcare.deployment.basepath=/digicel-service-selfcare
###swagger.enabled = true

#mongo db configuration
###spring.data.mongodb.uri: mongodb://digicel-ci.cmeoffshore.com:27017/digicel-web-admin-app
#spring.data.mongodb.host=digicel-ci.cmeoffshore.com
#spring.data.mongodb.port=27017
#spring.data.mongodb.database=digicel-web-admin-app
# spring.data.mongodb.username=
# spring.data.mongodb.password=
spring.data.mongodb.repositories.enabled=true

# Service Bus Configurations
###azure.serviceBus.proxyQueueWriterQueueName=disney_plus_qreader


#running the war file with Docker locally

# Profiles values: (prod/dev/debug) , (db,xml)
spring.profiles.active =prod, xml
#Initial pool size
puk.jdbc.connectionPooling.initialSize = 10
#Flag to log stack traces for application code which abandoned a Statement or Connection.
puk.jdbc.connectionPooling.logAbandoned = true
#Maximum number of allowed active connections at the same time
puk.jdbc.connectionPooling.maxActive = 20
#Maximum time a resource can wait while attempting borrowing from the pool, in milliseconds
puk.jdbc.connectionPooling.maxWait = 5000
#Defines whether to remove abandoned connections
puk.jdbc.connectionPooling.removeAbandoned = true
#Timeout in seconds before an abandoned connection can be removed.
puk.jdbc.connectionPooling.removeAbandonedTimeout = 5000

spring.jersey.type=filter
selfcare.deployment.basepath=/digicel-service-selfcare
swagger.enabled = true

#mongo db configuration
#spring.data.mongodb.uri: mongodb://digicel-ci.cmeoffshore.com:27017/digicel-web-admin-app
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=admin
spring.data.mongodb.username=mongoadmin
spring.data.mongodb.password=secret
spring.data.mongodb.repositories.enabled=true

# Service Bus Configurations
azure.serviceBus.proxyQueueWriterQueueName=disney_plus_qreader


#Then you add the log4j dependencies in pom file

#And remember mvn install:install helps in making changes reflect locally
#mvn clean
#mvn clean package or mvn package